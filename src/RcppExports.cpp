// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pascal_triangle
NumericMatrix pascal_triangle(int n);
RcppExport SEXP _rid_pascal_triangle(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(pascal_triangle(n));
    return rcpp_result_gen;
END_RCPP
}
// matrixMultiplication
NumericMatrix matrixMultiplication(NumericMatrix mat1, NumericMatrix mat2);
RcppExport SEXP _rid_matrixMultiplication(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(matrixMultiplication(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// fast_computation
NumericVector fast_computation(NumericMatrix XIPu, int s, int e, int l, int q);
RcppExport SEXP _rid_fast_computation(SEXP XIPuSEXP, SEXP sSEXP, SEXP eSEXP, SEXP lSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type XIPu(XIPuSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_computation(XIPu, s, e, l, q));
    return rcpp_result_gen;
END_RCPP
}
// Get_fs_l
DataFrame Get_fs_l(NumericMatrix data, IntegerMatrix intervals, int l, int q, Function IProj);
RcppExport SEXP _rid_Get_fs_l(SEXP dataSEXP, SEXP intervalsSEXP, SEXP lSEXP, SEXP qSEXP, SEXP IProjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type intervals(intervalsSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< Function >::type IProj(IProjSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_fs_l(data, intervals, l, q, IProj));
    return rcpp_result_gen;
END_RCPP
}
// Get_fs
NumericVector Get_fs(NumericMatrix x, NumericMatrix intervals, Function f, double q, Rcpp::Nullable<Rcpp::List> others);
RcppExport SEXP _rid_Get_fs(SEXP xSEXP, SEXP intervalsSEXP, SEXP fSEXP, SEXP qSEXP, SEXP othersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type intervals(intervalsSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type others(othersSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_fs(x, intervals, f, q, others));
    return rcpp_result_gen;
END_RCPP
}
// Get_fs_univariate
NumericVector Get_fs_univariate(NumericMatrix x, NumericMatrix intervals, Function f, double q, Rcpp::Nullable<Rcpp::List> others);
RcppExport SEXP _rid_Get_fs_univariate(SEXP xSEXP, SEXP intervalsSEXP, SEXP fSEXP, SEXP qSEXP, SEXP othersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type intervals(intervalsSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type others(othersSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_fs_univariate(x, intervals, f, q, others));
    return rcpp_result_gen;
END_RCPP
}
// g_cusum
NumericVector g_cusum(NumericVector x, int s, int e, Rcpp::Nullable<Rcpp::NumericVector> others);
RcppExport SEXP _rid_g_cusum(SEXP xSEXP, SEXP sSEXP, SEXP eSEXP, SEXP othersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type others(othersSEXP);
    rcpp_result_gen = Rcpp::wrap(g_cusum(x, s, e, others));
    return rcpp_result_gen;
END_RCPP
}
// f_cusum
NumericVector f_cusum(NumericMatrix x, int s, int e, double q, List others);
RcppExport SEXP _rid_f_cusum(SEXP xSEXP, SEXP sSEXP, SEXP eSEXP, SEXP qSEXP, SEXP othersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< List >::type others(othersSEXP);
    rcpp_result_gen = Rcpp::wrap(f_cusum(x, s, e, q, others));
    return rcpp_result_gen;
END_RCPP
}
// g_cusum_lrv
NumericVector g_cusum_lrv(NumericVector x, int s, int e, NumericVector lrv);
RcppExport SEXP _rid_g_cusum_lrv(SEXP xSEXP, SEXP sSEXP, SEXP eSEXP, SEXP lrvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lrv(lrvSEXP);
    rcpp_result_gen = Rcpp::wrap(g_cusum_lrv(x, s, e, lrv));
    return rcpp_result_gen;
END_RCPP
}
// f_cusum_lrv
NumericVector f_cusum_lrv(NumericMatrix x, int s, int e, double q, List others);
RcppExport SEXP _rid_f_cusum_lrv(SEXP xSEXP, SEXP sSEXP, SEXP eSEXP, SEXP qSEXP, SEXP othersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< List >::type others(othersSEXP);
    rcpp_result_gen = Rcpp::wrap(f_cusum_lrv(x, s, e, q, others));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rid_pascal_triangle", (DL_FUNC) &_rid_pascal_triangle, 1},
    {"_rid_matrixMultiplication", (DL_FUNC) &_rid_matrixMultiplication, 2},
    {"_rid_fast_computation", (DL_FUNC) &_rid_fast_computation, 5},
    {"_rid_Get_fs_l", (DL_FUNC) &_rid_Get_fs_l, 5},
    {"_rid_Get_fs", (DL_FUNC) &_rid_Get_fs, 5},
    {"_rid_Get_fs_univariate", (DL_FUNC) &_rid_Get_fs_univariate, 5},
    {"_rid_g_cusum", (DL_FUNC) &_rid_g_cusum, 4},
    {"_rid_f_cusum", (DL_FUNC) &_rid_f_cusum, 5},
    {"_rid_g_cusum_lrv", (DL_FUNC) &_rid_g_cusum_lrv, 4},
    {"_rid_f_cusum_lrv", (DL_FUNC) &_rid_f_cusum_lrv, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_rid(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
